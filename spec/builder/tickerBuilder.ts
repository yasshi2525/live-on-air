import { TickerBuilder } from '../../src'

describe('tickerBuilder', () => {
  it('デフォルトの設定を変更できる', () => {
    const def = TickerBuilder.getDefault(scene)
    expect(def.font()).toMatchObject({ size: 40 })
    expect(def.digit()).toBe(2)
    expect(def.prefix()).toEqual('残り')
    expect(def.suffix()).toEqual('秒')
    def
      .font(new g.DynamicFont({ game: g.game, fontFamily: 'sans-serif', size: 50 }))
      .digit(5)
      .prefix('TIME')
      .suffix('sec')
    expect(def.font()).toMatchObject({ size: 50 })
    expect(def.digit()).toBe(5)
    expect(def.prefix()).toEqual('TIME')
    expect(def.suffix()).toEqual('sec')
  })
  it('デフォルトの設定で作成できる', () => {
    const tb = new TickerBuilder(scene)
    expect(tb.font()).toMatchObject({ size: 40 })
    expect(tb.digit()).toBe(2)
    expect(tb.prefix()).toEqual('残り')
    expect(tb.suffix()).toEqual('秒')
    const ticker = tb.build()
    expect(ticker.font).toMatchObject({ size: 40 })
    expect(ticker.digit).toBe(2)
    expect(ticker.prefix).toEqual('残り')
    expect(ticker.suffix).toEqual('秒')
  })
  it('カスタム設定で作成できる', () => {
    const tb = new TickerBuilder(scene)
      .font(new g.DynamicFont({ game: g.game, fontFamily: 'sans-serif', size: 50 }))
      .digit(5)
      .prefix('TIME')
      .suffix('sec')
    expect(tb.font()).toMatchObject({ size: 50 })
    expect(tb.digit()).toBe(5)
    expect(tb.prefix()).toEqual('TIME')
    expect(tb.suffix()).toEqual('sec')
    const ticker = tb.build()
    expect(ticker.font).toMatchObject({ size: 50 })
    expect(ticker.digit).toBe(5)
    expect(ticker.prefix).toEqual('TIME')
    expect(ticker.suffix).toEqual('sec')
  })
  it('無効な値は設定できない', () => {
    const tb = new TickerBuilder(scene)
    expect(() => tb.digit(-1)).toThrow()
  })
})
